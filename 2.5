jmp start ; move to entry point 
start : 
      mov a, 128 ; set parameter number
      mov d, 232 ; screen start
      call print_num 
      hlt  ; halt program 
  print_ num:
            ; arguments:
            ;       a : source number 
            ; saving registers
            push a
            push b
            push c
            push d
            
            mov c,0 ; counter of all numbers 
print_num_loop:
         ; in this step a is current value 
         ; we find rest value
         mov d,a ; saving previous number 
         mov b,10
         div b   ; dividing number by 10
         push a  ; saving current value
         mul b
         sub d,a ; in d now destination number
         pop a   ; returning current value
         push d  ; push number into stack
         inc  c  ; increment count of numbers 
         cmp a,0 ; comparing number with 0
         jne ptint_num_loop
         ; prepairing screen:
         ; in 'd' address 
         mov d, 232
         print_num_loop_print:
         pop a
         add a,48 ; 48 is number of '0' symbol
         mov [d],a ; push number on screen 
         inc d ; increment screen position 
         dec c; decrement count of numbers 
         jne print_num_loop_print ; move if c!=0
         ; recovering registers 
         pop d
         pop c
         pop b
         pop a
         ret
         
           
